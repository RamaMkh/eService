using eServices.APIs.UserApp.Application.AppSettingsConfigurations;
using eServices.APIs.UserApp.Application.Infrastructure.Localization;
using eServicesV2.Kernel.Repository.Base;
using eServicesV2.Kernel.Service.SahelIntegrationForIndividualAuth;
using FluentValidation;
using MediatR;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using static eServicesV2.Kernel.Core.Configurations.SahelIntegrationModels;

namespace eServices.APIs.UserApp.Application.Features.V1.Queries.IndividualAuthorizationQueries
{
    public class InitiateeIndividualAuthorizationRequestForSahelQuery : IRequest<ResponseS>
    {
        private readonly string _civilId;
        #region CTOR
        public InitiateeIndividualAuthorizationRequestForSahelQuery(string civilId)
        {
            _civilId = civilId;
        }
        #endregion

        #region Handler
        public class InitiateeIndividualAuthorizationRequestForSahelQueryHandler : BaseQueryHandler, IRequestHandler<InitiateeIndividualAuthorizationRequestForSahelQuery, ResponseS>
        {
            private readonly ISahelIntegrationIAService _sahelIntegrationServie;
            private readonly IeServicesUnitOfWork _ieServicesUnitOfWork;
            public InitiateeIndividualAuthorizationRequestForSahelQueryHandler(IValidatorFactory validatorFactory, IHttpContextAccessor httpContextAccessor,
                IUserAppStringLocalizer localizer,
                IHostingEnvironment hostingEnvironment,
                IUserAppConfigurations configurations,
                 ISahelIntegrationIAService sahelIntegrationServie,
                IeServicesUnitOfWork ieServicesUnitOfWork = null)
                : base(validatorFactory, httpContextAccessor,
                      localizer, hostingEnvironment, configurations,
                      ieServicesUnitOfWork)
            {
                _ieServicesUnitOfWork = ieServicesUnitOfWork;
                _sahelIntegrationServie = sahelIntegrationServie;

            }
            public async Task<ResponseS> Handle(InitiateeIndividualAuthorizationRequestForSahelQuery request, CancellationToken cancellationToken)
            {
                //await _sahelIntegrationServie.CheckIndividualAuthorizationPendingRequests();
                ResponseS response = new ResponseS() { IsSuccess = true, Message = "" };
                response.Result = new Result()
                {
                    NameAr = _Configurations.IndividualAuthorizationSahelConfiguration.IndividualAuthServiceNameAr,
                    NameEn = _Configurations.IndividualAuthorizationSahelConfiguration.IndividualAuthServiceNameEn,
                    HintAr = _Configurations.IndividualAuthorizationSahelConfiguration.IndividualAuthorizationServiceHintAr,
                    HintEn = _Configurations.IndividualAuthorizationSahelConfiguration.IndividualAuthorizationServiceHintEn,
                    StepNo = 0,
                    TOS = null
                };

                List<ControlsModels> ControlsModels = new List<ControlsModels>();

                #region AuthorizerCivilId
                Validator civilIdValidator = new Validator
                {
                    MessageAr = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.AuthorizerCivilIdNoHintAr,
                    MessageEn = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.AuthorizerCivilIdNoHintEn,
                    Regex = @"^\d+(\.\d+)*$"
                };
                List<Validator> civilIdValidators = new List<Validator>();
                civilIdValidators.Add(civilIdValidator);
                ControlsModels.Add(new ControlsModels
                {
                    Id = "AuthorizerCivilId",
                    Type = "Text",
                    LabelAr = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.AuthorizerCivilIdNoLabelAr,
                    LabelEn = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.AuthorizerCivilIdNoLabelEn,
                    HintAr = null,
                    HintEn = null,
                    MaxLength = _Configurations.IndividualAuthorizationSahelConfiguration.CivilIdMaxLength,
                    IsRequired = true,
                    OptionControlModels = null,
                    AllowedExtensions = null,
                    DefaultValue = "",
                    Validators = civilIdValidators
                });

                #endregion AuthorizationPurposes
                var authorizationPurposesOptionsControlModels = await _sahelIntegrationServie.GetAuthorizationPurposes();
                ControlsModels.Add(new ControlsModels
                {
                    Id = "AuthorizationPurpose",
                    Type = "Dropdown",
                    LabelAr = _Configurations.IndividualAuthorizationSahelConfiguration.SearchService.AuthorizationPurposeLabelAr,
                    LabelEn = _Configurations.IndividualAuthorizationSahelConfiguration.SearchService.AuthorizationPurposeLabelEn,
                    HintAr = null,
                    HintEn = null,
                    MaxLength = null,
                    IsRequired = true,
                    OptionControlModels = authorizationPurposesOptionsControlModels,
                    AllowedExtensions = null,
                    DefaultValue = ""
                });
                #region ReferenceNumber
                ControlsModels.Add(new ControlsModels()
                {
                    Id = "ReferenceNumber",
                    Type = "Text",
                    LabelAr = _Configurations.IndividualAuthorizationSahelConfiguration.ReferenceNumberLabelAr,
                    LabelEn = _Configurations.IndividualAuthorizationSahelConfiguration.ReferenceNumberLabelEn,
                    HintAr = null,
                    HintEn = null,
                    MaxLength = null,
                    IsRequired = true,
                    OptionControlModels = null,
                    AllowedExtensions = "",
                    DefaultValue = "",
                    Validators = null
                });
                #endregion ports
                var portsOptionControlModels = await _sahelIntegrationServie.GetAllIndividualPorts();
                ControlsModels.Add(new ControlsModels()
                {
                    Id = "Port",
                    Type = "Dropdown",
                    LabelAr = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.PortLabelAr,
                    LabelEn = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.PortLabelEn,
                    HintAr = null,
                    HintEn = null,
                    MaxLength = null,
                    IsRequired = true,
                    OptionControlModels = portsOptionControlModels,
                    AllowedExtensions = null,
                    DefaultValue = ""
                });
                #region portOperators
                var operatorsOptionControlModels = await _sahelIntegrationServie.GetAllIndividualPortsOperator();
                ControlsModels.Add(new ControlsModels()
                {
                    Id = "PortOperators",
                    Type = "Dropdown",
                    LabelAr = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.PortOperatorLabelAr,
                    LabelEn = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.PortOperatorLabelEn,
                    HintAr = "يرجى الاختيار في حال تم اختيار المستودعات الجمركية",
                    HintEn = "please select in case of choosing customs warehouses adminstartion",
                    MaxLength = null,
                    IsRequired = false,
                    OptionControlModels = operatorsOptionControlModels,
                    AllowedExtensions = null,
                    DefaultValue = ""
                });
                #endregion
                #region Agreement
                ControlsModels.Add(new ControlsModels()
                {
                    Id = "Agreement",
                    Type = "Checkbox",
                    LabelAr = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.IndividualAuthAgrrementAr,
                    LabelEn = _Configurations.IndividualAuthorizationSahelConfiguration.NewRequestService.IndividualAuthAgrrementEn,
                    HintAr = null,
                    HintEn = null,
                    MaxLength = null,
                    IsRequired = true,
                    AllowedExtensions = null,
                    DefaultValue = ""
                });
                #endregion
                #region
                #endregion
                response.Result.ControlsModels = ControlsModels;
                return response;


            }

        }
        #endregion
    }
}
