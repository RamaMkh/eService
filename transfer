using eServicesV2.Kernel.Core.Configurations;
using eServicesV2.Kernel.Core.Logging;
using eServicesV2.Kernel.Core.Persistence;
using eServicesV2.Kernel.Domain.Entities.KGACEntities;
using eServicesV2.Kernel.Domain.Entities.ServiceRequestEntities;
using eServicesV2.Kernel.Domain.Enums;
using Microsoft.EntityFrameworkCore;
using sahelIntegrationIA.Configurations;
using sahelIntegrationIA.Models;
using System.Data;

namespace sahelIntegrationIA
{
    public class VerificationServiceForOrganizationServices
    {
        private readonly IRequestLogger _logger;
        private TimeSpan period;
        private readonly IBaseConfiguration _configurations;
        private readonly eServicesContext _eServicesContext;
        private readonly IRequestLogger _requestLogger;
        private readonly IDapper _dapper;
        private readonly SahelConfigurations _sahelConfigurations;
        public VerificationServiceForOrganizationServices(IRequestLogger logger,
            IBaseConfiguration configuration, eServicesContext eServicesContext, IRequestLogger requestLogger, IDapper dapper, SahelConfigurations sahelConfigurations)
        {
            _logger = logger;
            _configurations = configuration;
            _eServicesContext = eServicesContext;
            _requestLogger = requestLogger;
            _dapper = dapper;
            _sahelConfigurations = sahelConfigurations;
        }
        public async Task<List<ServiceRequest>> GetRequestList()
        {
            string[] statusEnums = new string[]
            {
                    nameof(ServiceRequestStatesEnum.EServiceRequestORGCreatedState),
                     nameof(ServiceRequestStatesEnum.EServiceRequestORGForAdditionalInfo),
                nameof(ServiceRequestStatesEnum.EServiceRequestORGRejectedState),
                 nameof(ServiceRequestStatesEnum.EServiceRequestCreatedState),
                  nameof(ServiceRequestStatesEnum.EServiceRequestRejectedState),
            };
            int[] serviceIds = new int[]
            {
                (int)ServiceTypesEnum.NewImportLicenseRequest,
                (int)ServiceTypesEnum.ImportLicenseRenewalRequest,
            };
            var requestList1 = await _eServicesContext
.Set<ServiceRequest>()
.Where(p => statusEnums.Contains(p.StateId)
        )
.Select(p=>p.StateId)
.ToListAsync();
            var requestList = await _eServicesContext
     .Set<ServiceRequest>()
     .Include(p => p.ServiceRequestsDetail)
     .Where(p => statusEnums.Contains(p.StateId)
                 && p.RequestSource == "Sahel"
                 && !string.IsNullOrEmpty(p.ServiceRequestsDetail.KMIDToken)
                 && serviceIds.Contains((int)p.ServiceId.Value))
     .ToListAsync();

            var kmidCreatedList = requestList.Select(a=>a.ServiceRequestsDetail.KMIDToken).ToList();
            List<KGACPACIQueue>? expiredKmidRequests = await _eServicesContext
          .Set<KGACPACIQueue>()
          .Where(a => kmidCreatedList.Contains(a.KGACPACIQueueId.ToString())
          && a.DateCreated + TimeSpan.FromSeconds(_sahelConfigurations.OrganizationKMIDCallingTimer)>DateTime.Now)
          .ToListAsync();
            var filteredRequestList = requestList.Where(request => !expiredKmidRequests.Any(expired => expired.KGACPACIQueueId.ToString() == request.ServiceRequestsDetail.KMIDToken)).ToList();

            return filteredRequestList;

        }


    }


}
